#!/bin/bash

#---------------------------------------------------------------------------------
#
#   Библиотека функций для busybox для  
#   вывода на экран сообщения о выполнении функции 
#   и вывода результатов ее работы  
# 
#   Автор       : Железа
#   Email       : dev@zeleza.ru
#   Лицензия    : Apache Версия 2.0, январь 2004
# 
#   Создан      : 05 февраля 2024 год
#   Обновлен    : 05 февраля 2024 год
#
#	Зависит 	: system/screen
#
#---------------------------------------------------------------------------------
#
#   Применение библиотеки:
#
#   Выводим сообщение на экран после чего запускаем необходимую функцию и после 
#   ее завершения в зависимости от результата ее выполнения выводим результат. 
#   При этом во время исполнения функции на экране отображается бегунок в виде 
#   сменяющихся друг за другом на одном месте символов "/-\\|/-\\|". 
#
#   Пример:
#       whenRun 'Запускаем обработку функции my_func'
#       my_func && when_ok "ГОТОВО" || when_err "ПРОБЛЕМА" "Проверьте работу функции my_func"
# 
#   Вывод на экран в случае если все прошло хорошо
#       Запускаем обработку функции my_func       ГОТОВО
# 
#  Вывод на экран в случае если возникла проблема:
#       Запускаем обработку функции my_func       ПРОБЛЕМА
#       --------------------------------------------------- 
#       Проверьте работу функции my_func 
#       ---------------------------------------------------  
#
#---------------------------------------------------------------------------------

PREFIX='>> '	# префикс который будет печататься перед выводом любого сообщения ready

spinner() {
#---------------------------------------------------------------------------------
#   Выводит на экран  бегунок в виде 
#   сменяющихся друг за другом на одном 
#   месте символов "/-\\|/-\\|". 
#---------------------------------------------------------------------------------
    printf "${CRS_OFF}"                 # отключаем показ курсора на экране
    local spinner="/-\\|/-\\|"
    local spin_i=0
    while true; do
    	printf "${BOLD}${YELLOW}"
        printf "\b%s" "${spinner:spin_i++%${#spinner}:1}"
        sleep 0.1
        printf "${NOCL}"
    done
}

stop_spinner(){
#---------------------------------------------------------------------------------
# Проверяем запущен лди бегунок и убиваем задание 
# а также, включаем курсор на экране
#---------------------------------------------------------------------------------
    if [ -n "${SPINNER_PID}" ] && ps | grep -q " ${SPINNER_PID} " ; then
    	kill ${SPINNER_PID}
    	disown ${SPINNER_PID}
    fi
    # включаем показ курсора на экране
    printf "${CRS_ON}"
}

ready() {
#---------------------------------------------------------------------------------
#   Выводим сообщение на экран сообщение с определенным цветом
#   и запускаем на первой позиции бегунок который показывает
#   что процедура запущена. Данная функция работает 
#   в купе с when_ok и when_err (см. ниже)
# 
#   Аргументы функции
#   $1 - текст сообщения 
#   $2 - цвет сообщения [по умолчанию: желтый]
#---------------------------------------------------------------------------------
    MSG="$1"; 
    local color=${2:-${YELLOW}}

	# выводим префикс сообщения ">> "
	# выводим тест сообщения "- текст"

#	чистим от управляющих символов,
#	что бы вывести весь текст одним желтым цветом
	msg=$(clean_escape "${MSG}")

#	Печатаем строку
	printf "${PREFIX}${SM_WAIT} ${color}${msg}${NOCL}"

# 	Переводим курсор в крайнюю левую позицию
	READY_TO_END=$((${APP_SCREEN_WIDTH} - 3))
	READY_TO_END="\e[${READY_TO_END}C"
	printf "${CRS_TO1}${READY_TO_END}"

    spinner &                                   		# запускаем в фоне бегунок
    SPINNER_PID=$!                              		# сохраняем PID запущенного бегунка
}

ready_end() {
#---------------------------------------------------------------------------------
#   Выводим после сообщения, выведенное функцией ready
#   текст что все хорошо (статус выполнения)
#
#   Аргументы функции
#   $1 - текст успешного исполнения операции
#   $2 - управляющая последовательность цвета сообщения [по умолчанию: ${GREEN}]
#---------------------------------------------------------------------------------

    # останавливаем бегунок, если он запущен
    stop_spinner

    local msg="$1" color=${2} sim_ready=${3} description=${4}

    # удаляем из сообщения выведенное ready точки на конце, если они есть
    MSG=$(printf "${MSG}" | sed 's/\.*$//')

    len=$((APP_SCREEN_WIDTH - ${#msg} - 1))               	# вычисляем длину сообщения и прибавляем 5
    local to_right="${CRS_TO1}\e[${len}C"                     # готовим переменную для перехода на вычисленную позицию

	msg=$(printf "${msg}" | tr '[:lower:]' '[:upper:]' )

    # выводим его на экран: чистим сроку,
    # переходим в правую крайнюю позицию и печатаем галочку
    # далее пробел и текст сообщения (без точек) и далее статус в цвете
    printf "${NOCL}${CRS_STR_CL}${CRS_TO1}${PREFIX}${sim_ready} ${MSG}${to_right}${color}${msg}${NOCL}\n"

	# если задано описание ошибки печатаем его на следующей строке
	if [ -n "${description}" ] ; then
		err_screen_width=$((APP_SCREEN_WIDTH - 5))
		print_line
		err_desc="$(printf "${err_desc}" | awk 1 ORS="\n${PREFIX}  " | fold -w ${err_screen_width})"
		printf "${PREFIX}  ${RED}Описание ошибки${NOCL}\n     "
		print_line ${err_screen_width} '─'
		printf "${PREFIX}  ${err_desc}\n"
	fi
}

when_ok() {
	ready_end "${1:-ГОТОВО}" "${GREEN}" "${SM_OK}"
}

ready_ok() {
#---------------------------------------------------------------------------------
#   Выводим после сообщения, выведенное функцией ready
#   текст что все хорошо (статус выполнения)
# 
#   Аргументы функции
#   $1 - текст успешного исполнения операции 
#   $2 - цвет сообщения [по умолчанию: зеленый]
#---------------------------------------------------------------------------------
    
    # останавливаем бегунок, если он запущен
    stop_spinner                                
    
    local msg_ok="$1"
    local color=${2:-${GREEN}}

    # удаляем из сообщения выведенное ready точки на конце, если они есть
    MSG=$(printf "${MSG}" | sed 's/\.*$//')

    len=$((APP_SCREEN_WIDTH - ${#msg_ok} - 1))               	# вычисляем длину сообщения и прибавляем 5
    local to_right="${CRS_TO1}\e[${len}C"                     # готовим переменную для перехода на вычисленную позицию

	msg_ok=$(printf "${msg_ok}" | tr '[:lower:]' '[:upper:]' )

    # выводим его на экран: чистим сроку, 
    # переходим в правую крайнюю позицию и печатаем галочку
    # далее пробел и текст сообщения (без точек) и далее статус в цвете
    printf "${NOCL}${CRS_STR_CL}${CRS_TO1}${PREFIX}${SM_OK} ${MSG}${to_right}${color}${msg_ok}${NOCL}\n"
    # очищаем глобальные переменные
#    MSG='';
}

when_err() {
	ready_end "${1:-ОШИБКА}" "${RED}" "${SM_CROSS}"	"${2}"
}

ready_err() {
#---------------------------------------------------------------------------------
#   Выводим после сообщения, выведенное функцией ready
#   текст что случилась ошибка (статус выполнения)
# 
#   Аргументы функции
#   $1 - текст проблемного исполнения операции 
#   $2 - поясняющий текст к ошибке при выполнении операции [по умолчанию: отсутствует]
#---------------------------------------------------------------------------------
    
    # останавливаем бегунок, если он запущен
    stop_spinner     

    local err_status="${1:-ОШИБКА}"
    local err_desc="${2}"

    # удаляем из сообщения выведенное ready точки на конце, если они есть
    MSG=$(printf "${MSG}" | sed 's/\.*$//')

    len=$((APP_SCREEN_WIDTH - ${#err_status} - 1))               	# вычисляем длину сообщения и прибавляем 5
    local to_right="${CRS_TO1}\e[${len}C"                     # готовим переменную для перехода на вычисленную позицию

	err_status=$(printf "${err_status}" | tr '[:lower:]' '[:upper:]' )
    # печатаем крестик в первой позиции экрана 
    # и текст исполнения операции
    printf "${NOCL}${CRS_STR_CL}${CRS_TO1}${PREFIX}${SM_CROSS} ${MSG}${to_right}${RED}${err_status}${NOCL}\n"
    # если задано описание ошибки печатаем его на следующей строке
    [ -n "${err_desc}" ] && {
    	err_screen_width=$((APP_SCREEN_WIDTH - 5))
        print_line
        err_desc="$(printf "${err_desc}" | awk 1 ORS="\n${PREFIX}  " | fold -w ${err_screen_width})"
        printf "${PREFIX}  ${RED}Описание ошибки${NOCL}\n     "
        print_line ${err_screen_width} '─'
        printf "${PREFIX}  ${err_desc}\n"
    }
    # очищаем глобальные переменные
#    MSG='';

}

run_then() {
#---------------------------------------------------------------------------------
#
#   Запускает команду и осуществляет реакцию на ее выполнение 
# 
#   Аргументы функции
#  *$1 - сообщение о начале работы исполнения команды [ОБЯЗАТЕЛЬНЫЙ]
#  *$2 - исполняемая команда с аргументами в виде строки [ОБЯЗАТЕЛЬНЫЙ]
#   $3 - поясняющий текст к ошибке, в случае ее возникновения [по умолчанию: отсутствует]
#
#   $4 - текст при получении ошибки [по умолчанию: ОШИБКА]
#   $5 - текст при корректном исполнении команды [по умолчанию: ГОТОВО]
#   $6 - цвет сообщения [по умолчанию: GREEN]
#
#---------------------------------------------------------------------------------    
    
    local mess="${1}" cmd="${2}"err_desc="${3}" text_er="${4}" text_ok="${5}" color_ok="${6}"

    ready "${mess}"                             # выводим сообщение о запуске команды

    if eval "${cmd}" ; then                     # исполняем команду 
        when_ok "${text_ok}" "${color_ok}"      # если все хорошо, то выводим сообщение ГОТОВО
    else 
        when_err "${text_er}" "${err_desc}"     # Если ошибка, то выводим сообщение 
    fi 

}

