#!/bin/bash
. "./CONFIG"
set -e

RED="\033[1;31m";
GREEN="\033[1;32m";
BLUE="\033[36m";
YELLOW="\033[33m";
NOCL="\033[m";
PREF='>> '
#----------------------------------------------------------------------------------------------------------------------
# Печатаем строку из 100  знаков равно
#----------------------------------------------------------------------------------------------------------------------
show_line(){
  printf '=%.s' {1..100} && printf '\n'
}

#----------------------------------------------------------------------------------------------------------------------
# Получаем имя приложения из названия корневой папки
#----------------------------------------------------------------------------------------------------------------------
APP_NAME=$(pwd | sed "s/.*\\${APPS_ROOT}\/\(.*\).*$/\1/;" | cut -d'/' -f1)
#----------------------------------------------------------------------------------------------------------------------
# Получаем необходимую информацию о версии пакета
#----------------------------------------------------------------------------------------------------------------------
get_version_part(){
	value=${1}
	cat < "${APPS_ROOT}/${APP_NAME}/build/version" | grep "${value}" | cut -d'=' -f2
}

VERSION=$(get_version_part VERSION)
STAGE=$(get_version_part STAGE)
RELEASE=$(get_version_part RELEASE)

if [ -n "${STAGE}" ]; then FULL_VERSION="${VERSION} ${STAGE} ${RELEASE}"; else FULL_VERSION="${VERSION} ${RELEASE}"; fi

#----------------------------------------------------------------------------------------------------------------------
# Получаем значение из скрытого файла конфигурации
#----------------------------------------------------------------------------------------------------------------------
get_config_value(){
  cat < "${BASEDIR}/CONFIG" | grep -E "^${1}=" | cut -d'=' -f2
}

#----------------------------------------------------------------------------------------------------------------------
# Получаем имя приложения из названия корневой папки
#----------------------------------------------------------------------------------------------------------------------
APP_NAME=$(echo "${BASEDIR}" | sed "s/.*\\${APPS_ROOT}\/\(.*\).*$/\1/;" | cut -d'/' -f1)
#----------------------------------------------------------------------------------------------------------------------
# Получаем тип архитектуры процессора роутера
#----------------------------------------------------------------------------------------------------------------------
get_router_arch(){
    cat < "/apps/entware/package/utils/${APP_NAME}/Makefile" | grep -v '#' | sed -n 's/\(^.*PKGARCH:=\)\(.*\)$/\2/p'
}
#----------------------------------------------------------------------------------------------------------------------
# Получаем имя пакета для сборки
#----------------------------------------------------------------------------------------------------------------------
get_ipk_package_name(){
    echo "${APP_NAME}_${VERSION}-${STAGE}-${RELEASE}_$(get_router_arch).ipk"
}
#----------------------------------------------------------------------------------------------------------------------
# Получаем полный путь до пакета сборки в контейнере
#----------------------------------------------------------------------------------------------------------------------
get_ipk_package_file(){
    echo "/apps/entware/bin/targets/mipsel-3.4/generic-glibc/packages/$(get_ipk_package_name)"
}

#----------------------------------------------------------------------------------------------------------------------
# Получаем путь до ключа
#----------------------------------------------------------------------------------------------------------------------
get_key_file(){
	key_name=id_rsa
	key_path=$([ "$(whoami)" = root ] && echo '/root' || echo "${HOME}")
	key_file_pub="${key_path}/.ssh/${key_name}.pub"
	key_file_prv="${key_path}/.ssh/${key_name}"
	[ -f "${key_file_pub}" ] || ssh-keygen -t rsa -N "" -f "${key_file_prv}" &>/dev/null
	echo "${key_file_pub}"
}


#----------------------------------------------------------------------------------------------------------------------
# ИСПОЛНЯЕМ ВНУТРИ КОНТЕЙНЕРА !!!
# Копируем публичный ключ на роутер
#----------------------------------------------------------------------------------------------------------------------
copy_ssh_keys_to_router(){
	# если ключи отсутствуют на NAS
	echo "${PREF}Копируем ключи на роутер ${ROUTER} порт ${PORT}..."
	ssh -p "${PORT}" "${ROUTER}" "echo \"$(cat "$(get_key_file)")\" >> /opt/root/.ssh/authorized_keys"
	show_line
}

#----------------------------------------------------------------------------------------------------------------------
# ИСПОЛНЯЕМ ВНУТРИ КОНТЕЙНЕРА !!!
# Производим копирование собранного пакета на роутер
#----------------------------------------------------------------------------------------------------------------------
copy_app_to_router(){

# 	Проверяем есть ли ключ на роутере
	docker_key=$(cat < "$(get_key_file)")
	ssh -p "${PORT}" "${ROUTER}" 'cat /opt/root/.ssh/authorized_keys' | grep -q "${docker_key}" \
	|| copy_ssh_keys_to_router
	echo "${PREF}Загрузка пакета на роутер..."
	ssh -p "${PORT}" "${ROUTER}" '[ -d /opt/packages ] || mkdir -p /opt/packages'
	app_tar_name=$(get_ipk_package_name)
	ssh -p "${PORT}" "${ROUTER}" 'rm -f '"/opt/packages/${app_tar_name}" #&> /dev/null
	scp -P "${PORT}" "$(get_ipk_package_file)" "${ROUTER}:/opt/packages/${app_tar_name}"
}

#----------------------------------------------------------------------------------------------------------------------
# ИСПОЛНЯЕМ ВНУТРИ КОНТЕЙНЕРА !!!
# Производим удаление и установку пакета
#----------------------------------------------------------------------------------------------------------------------
run_reinstalation_on_router(){
	ssh -p "${PORT}" "${ROUTER}" 'opkg remove '"${APP_NAME}"
	ssh -p "${PORT}" "${ROUTER}" 'opkg install /opt/packages/'"$(get_ipk_package_name)"  #<<< 2
}

#========================================================================================================
#
# 	Функции которая меняет крайнюю версию пакета в файлах собираемого пакета
# 	на основе данных из файла ./version
#
#========================================================================================================
change_version_in_package(){
	sed -i "s/^\(APP_VERSION=\).*/\1${VERSION}/g" \
		/apps/entware/package/utils/"${APP_NAME}"/files/bin/"${APP_NAME}"
	sed -i "s/^\(APP_RELEASE=\).*/\1${STAGE}-${RELEASE}/g" \
		/apps/entware/package/utils/"${APP_NAME}"/files/bin/"${APP_NAME}"
	sed -i -e 's/\(^.*Крайняя версия Кваса.\)\[.*\]\(.*\)/\1 ['"${FULL_VERSION}"']\2/' \
		/apps/"${APP_NAME}"/README.md
}

#----------------------------------------------------------------------------------------------------------------------
# Получаем путь до ключа
#----------------------------------------------------------------------------------------------------------------------
get_key_file(){
	key_name=id_rsa
	key_path=$([ "$(whoami)" = root ] && echo '/root/.' || echo "${HOME}/.")
	key_file_pub="${key_path}ssh/${key_name}.pub"
	key_file_prv="${key_path}ssh/${key_name}"
	[ -f "${key_file_pub}" ] || ssh-keygen -t rsa -N "" -f "${key_file_prv}" &>/dev/null
	echo "${key_file_pub}"
}


#----------------------------------------------------------------------------------------------------------------------
# ИСПОЛНЯЕМ ВНУТРИ КОНТЕЙНЕРА !!!
# Копируем публичный ключ на роутер
#----------------------------------------------------------------------------------------------------------------------
copy_ssh_keys_to_router(){
	# если ключи отсутствуют на NAS
	echo "${PREF}Копируем ключи на роутер ${ROUTER} порт ${PORT}..."
	ssh -p "${PORT}" "${ROUTER}" "echo \"$(cat "$(get_key_file)")\" >> /opt/root/.ssh/authorized_keys"
	show_line
}

#----------------------------------------------------------------------------------------------------------------------
# ИСПОЛНЯЕМ ВНУТРИ КОНТЕЙНЕРА !!!
# Производим копирование собранного пакета на роутер
#----------------------------------------------------------------------------------------------------------------------
copy_app_to_router(){

# 	Проверяем есть ли ключ на роутере
	docker_key=$(cat < "$(get_key_file)")
	ssh -p "${PORT}" "${ROUTER}" 'cat /opt/root/.ssh/authorized_keys' | grep -q "${docker_key}" \
	|| copy_ssh_keys_to_router
	echo "${PREF}Загрузка пакета на роутер и его последующая установка..."
	show_line
	ssh -p "${PORT}" "${ROUTER}" '[ -d /opt/packages ] || mkdir -p /opt/packages'
	app_tar_name=$(get_ipk_package_name)
	ssh -p "${PORT}" "${ROUTER}" 'rm -f '"/opt/packages/${app_tar_name}" #&> /dev/null
	scp -P "${PORT}" "$(get_ipk_package_file)" "${ROUTER}:/opt/packages/${app_tar_name}"
}

